#region Init
param($Timer)

# Disable progress messages from Posh-ACME module
$global:ProgressPreference = 'SilentlyContinue'

# Stop on error
$ErrorActionPreference = 'Stop'

# Get variables from Function App Settings
$KeyVaultName = $env:KEY_VAULT_NAME
$AKVCertNames  = $env:AKV_CERT_NAME -split ', '
$TempDir      = $env:POSHACME_HOME
#endregion Init

#region Configure
# Get Storage Account secret from Key Vault and Subscription Id from the Function context
Write-Information 'Getting Storage Account connection information'
$SasUrl = Get-AzKeyVaultSecret -VaultName $KeyVaultName -SecretName 'ACME-SAS' -AsPlainText

Write-Information 'Generating Access Token using Function App MSI'
$SubscriptionId = (Get-AzContext).Subscription.Id
$TenantId       = (Get-AzContext).Tenant.Id
$AzToken        = (Get-AzAccessToken -ResourceUrl "https://management.core.windows.net/" -TenantId $TenantId).Token

# Create Posh-ACME config directory
if (-not (Test-Path -Path $TempDir)) {
    Write-Information 'Creating Posh-ACME config home'
    New-Item -ItemType Directory -Path $TempDir -Force | Out-Null
}

# Download Posh-ACME configuration from Storage Account using AzCopy
Write-Information "Syncing current Posh-ACME configuration from Storage Account to $TempDir"
.\azcopy.exe sync $SasUrl $TempDir --recursive

Write-Information 'Wait for AzCopy to exit before initializing Posh-ACME'
Start-Sleep -Seconds 20

# Initialize Posh-ACME
Write-Information "Initializing Posh-ACME in $TempDir"
Import-Module Posh-ACME -Force -Verbose

try {
    # Get certificate order configuration
    Write-Information 'Getting certificate orders from synced Posh-ACME directory'
    $CertOrders = Get-PAOrder -List
} catch {
    Write-Error 'Posh-ACME cannot detect certificate order. Please ensure that $env:POSHACME_HOME is properly configured, and the certificate order is in that location.'
}
#endregion Configure

#region Renew
foreach ($CertOrder in $CertOrders) {
    if ($CertOrder) {
        Write-Information "Got Posh-ACME certificate configuration for $($CertOrder.MainDomain). Valid until $($CertOrder.CertExpires)"
        if ($CertOrder.MainDomain -like 'www*') {
            $AKVCertName = $AKVCertNames | Where-Object { $_ -like 'www*' }
        } else {
            $AKVCertName = $AKVCertNames | Where-Object { $_ -notlike 'www*' }
        }
    } else {
        Write-Error 'Unable to find certificate order configuration in Posh-ACME home directory'
    }

    if ((Get-Date $CertOrder.RenewAfter) -le (Get-Date)) {
        # Get Azure Key Vault certificate file
        Write-Information "Certificate is ready for renewal as of $([datetime]$CertOrder.RenewAfter). Renewing certificate..."
        $AKVCert = Get-AzKeyVaultCertificate -VaultName $KeyVaultName -Name $AKVCertName

        if ($AKVCert.Thumbprint -eq (Get-PACertificate).Thumbprint) {
            Write-Information "Certificate is $($CertOrder.status). Submitting renewal for $($CertOrder.MainDomain) certificate with thumbprint: $((Get-PACertificate).Thumbprint)"
            $NewCert = Submit-Renewal -PluginArgs @{ AZSubscriptionId = $SubscriptionId; AzAccessToken = $AzToken } -Verbose
        } elseif (-not $AKVCert) {
            Write-Error "Azure Key Vault certificate not found. Please investigate."
        } else {
            Write-Information "AKV: $($AKVCert.Thumbprint)"
            Write-Information "ACME: $((Get-PACertificate).Thumbprint)"
            Write-Error 'Azure Key Vault certificate thumbprint does not match Posh-ACME certificate thumbprint. Investigate and eliminate the inconsistency.'
        }

        if ($NewCert -and $AKVCert.Thumbprint -ne $NewCert.Thumbprint) {
            # Set certificate file information for Key Vault import
            $ServerName  = ([system.uri](Get-PAServer).location).host
            $AccountName = (Get-PAAccount).id
            $CertFile    = [IO.Path]::Combine($TempDir, $ServerName, $AccountName, $CertOrder.MainDomain, 'fullchain.pfx')

            Write-Information "Importing updated certificate to Azure Key Vault with thumbprint: $($NewCert.Thumbprint)"
            Import-AzKeyVaultCertificate -VaultName $KeyVaultName -Name $AKVCertName -FilePath $CertFile -Password $NewCert.PfxPass

            Write-Information 'Syncing updated Posh-ACME configuration to Storage Account.'
            ./AzCopy.exe sync $TempDir $SasUrl --recursive
            Write-Information 'Sync to Storage Account successful. Complete.'
        } elseif (-not $NewCert) {
            Write-Error 'New certificate was not successfully generated by Posh-ACME'
        } else {
            Write-Information 'Azure Key Vault certificate thumbprint matches Posh-ACME certificate thumbprint. Complete.'
        }
    } else {
        Write-Information "Certificate for $($CertOrder.MainDomain) is valid until $($CertOrder.CertExpires). Complete."
    }
    #endregion Renew
}
